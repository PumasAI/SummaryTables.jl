var documenterSearchIndex = {"docs":
[{"location":"predefined_tables/listingtable/#listingtable","page":"listingtable","title":"listingtable","text":"","category":"section"},{"location":"predefined_tables/listingtable/#Synopsis","page":"listingtable","title":"Synopsis","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"A listing table displays the raw data from one column of a source table, with optional summary sections interleaved between. The row and column structure of the listing table is defined by grouping columns from the source table. Each row of data has to have its own cell in the listing table, therefore the grouping applied along rows and columns must be exhaustive, i.e., no two rows may end up in the same group together.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Here is an example of a hypothetical clinical trial with drug concentration measurements of two participants with five time points each.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    concentration = [1.2, 4.5, 2.0, 1.5, 0.1, 1.8, 3.2, 1.8, 1.2, 0.2],\n    id = repeat([1, 2], inner = 5),\n    time = repeat([0, 0.5, 1, 2, 3], 2)\n)\n\nlistingtable(\n    data,\n    :concentration => \"Concentration (ng/mL)\",\n    rows = :id => \"ID\",\n    cols = :time => \"Time (hr)\",\n    summarize_rows = [\n        length => \"N\",\n        mean => \"Mean\",\n        std => \"SD\",\n    ]\n)","category":"page"},{"location":"predefined_tables/listingtable/#Argument-1:-table","page":"listingtable","title":"Argument 1: table","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"The first argument can be any object that is a table compatible with the Tables.jl API. Here are some common examples:","category":"page"},{"location":"predefined_tables/listingtable/#DataFrame","page":"listingtable","title":"DataFrame","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(value = 1:6, group1 = repeat([\"A\", \"B\", \"C\"], 2), group2 = repeat([\"D\", \"E\"], inner = 3))\n\nlistingtable(data, :value, rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/#NamedTuple-of-Vectors","page":"listingtable","title":"NamedTuple of Vectors","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using SummaryTables\n\ndata = (; value = 1:6, group1 = repeat([\"A\", \"B\", \"C\"], 2), group2 = repeat([\"D\", \"E\"], inner = 3))\n\nlistingtable(data, :value, rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/#Vector-of-NamedTuples","page":"listingtable","title":"Vector of NamedTuples","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using SummaryTables\n\ndata = [\n    (value = 1, group1 = \"A\", group2 = \"D\")\n    (value = 2, group1 = \"B\", group2 = \"D\")\n    (value = 3, group1 = \"C\", group2 = \"D\")\n    (value = 4, group1 = \"A\", group2 = \"E\")\n    (value = 5, group1 = \"B\", group2 = \"E\")\n    (value = 6, group1 = \"C\", group2 = \"E\")\n]\n\nlistingtable(data, :value, rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/#Argument-2:-variable","page":"listingtable","title":"Argument 2: variable","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"The second argument primarily selects the table column whose data should populate the cells of the listing table. The column name is specified with a Symbol:","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value1 = 1:6,\n    value2 = 7:12,\n    group1 = repeat([\"A\", \"B\", \"C\"], 2),\n    group2 = repeat([\"D\", \"E\"], inner = 3)\n)\n\nlistingtable(data, :value1, rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Here we choose to list column :value2 instead:","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value1 = 1:6,\n    value2 = 7:12,\n    group1 = repeat([\"A\", \"B\", \"C\"], 2),\n    group2 = repeat([\"D\", \"E\"], inner = 3)\n)\n\nlistingtable(data, :value2, rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"By default, the variable name is used as the label as well. You can pass a different label as the second element of a Pair using the => operators. The label can be of any type (refer to Types of cell values for a list).","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value1 = 1:6,\n    value2 = 7:12,\n    group1 = repeat([\"A\", \"B\", \"C\"], 2),\n    group2 = repeat([\"D\", \"E\"], inner = 3)\n)\n\nlistingtable(data, :value1 => \"Value\", rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/#Optional-argument-3:-pagination","page":"listingtable","title":"Optional argument 3: pagination","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"A listing table can grow large, in which case it may make sense to split it into multiple pages. You can pass a Pagination object with rows and / or cols keyword arguments. The Int you pass to rows and / or cols determines how many \"sections\" of the table along that dimension are included in a single page. If there are no summary statistics, a \"section\" is a single row or column. If there are summary statistics, a \"section\" includes all the rows or columns that are summarized together (as it would not make sense to split summarized groups across multiple pages).","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"If the pagination argument is provided, the return type of listingtable changes to PaginatedTable{ListingPageMetadata}. This object has an interactive HTML representation for convenience the exact form of which should not be considered stable across SummaryTables versions. The PaginatedTable should be deconstructed into separate Tables when you want to include these in a document.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Here is an example listing table without pagination:","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:30,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\", \"E\"], 6),\n    group2 = repeat([\"F\", \"G\", \"H\", \"I\", \"J\", \"K\"], inner = 5)\n)\n\nlistingtable(data, :value, rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"And here is the same table paginated into groups of 3 sections along the both the rows and columns. Note that there are only five rows in the original table, which is not divisible by 3, so two pages have only two rows.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:30,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\", \"E\"], 6),\n    group2 = repeat([\"F\", \"G\", \"H\", \"I\", \"J\", \"K\"], inner = 5)\n)\n\nlistingtable(data, :value, Pagination(rows = 3, cols = 3), rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"We can also paginate only along the rows:","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:30,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\", \"E\"], 6),\n    group2 = repeat([\"F\", \"G\", \"H\", \"I\", \"J\", \"K\"], inner = 5)\n)\n\nlistingtable(data, :value, Pagination(rows = 3), rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Or only along the columns:","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:30,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\", \"E\"], 6),\n    group2 = repeat([\"F\", \"G\", \"H\", \"I\", \"J\", \"K\"], inner = 5)\n)\n\nlistingtable(data, :value, Pagination(cols = 3), rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/#Keyword:-rows","page":"listingtable","title":"Keyword: rows","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"The rows keyword determines the grouping structure along the rows. It can either be a Symbol specifying a grouping column, a Pair{Symbol,Any} where the second element overrides the group's label, or a Vector with multiple groups of the aforementioned format.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"This example uses a single group with default label.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:5,\n    group = [\"A\", \"B\", \"C\", \"D\", \"E\"],\n)\n\nlistingtable(data, :value, rows = :group)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"The label can be overridden using the Pair operator.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:5,\n    group = [\"A\", \"B\", \"C\", \"D\", \"E\"],\n)\n\nlistingtable(data, :value, rows = :group => \"Group\")","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Multiple groups are possible as well, in that case you get a nested display where the last group changes the fastest.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:5,\n    group1 = [\"F\", \"F\", \"G\", \"G\", \"G\"],\n    group2 = [\"A\", \"B\", \"C\", \"D\", \"E\"],\n)\n\nlistingtable(data, :value, rows = [:group1, :group2 => \"Group 2\"])","category":"page"},{"location":"predefined_tables/listingtable/#Keyword:-cols","page":"listingtable","title":"Keyword: cols","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"The cols keyword determines the grouping structure along the columns. It can either be a Symbol specifying a grouping column, a Pair{Symbol,Any} where the second element overrides the group's label, or a Vector with multiple groups of the aforementioned format.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"This example uses a single group with default label.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:5,\n    group = [\"A\", \"B\", \"C\", \"D\", \"E\"],\n)\n\nlistingtable(data, :value, cols = :group)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"The label can be overridden using the Pair operator.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:5,\n    group = [\"A\", \"B\", \"C\", \"D\", \"E\"],\n)\n\nlistingtable(data, :value, cols = :group => \"Group\")","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Multiple groups are possible as well, in that case you get a nested display where the last group changes the fastest.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:5,\n    group1 = [\"F\", \"F\", \"G\", \"G\", \"G\"],\n    group2 = [\"A\", \"B\", \"C\", \"D\", \"E\"],\n)\n\nlistingtable(data, :value, cols = [:group1, :group2 => \"Group 2\"])","category":"page"},{"location":"predefined_tables/listingtable/#Keyword:-summarize_rows","page":"listingtable","title":"Keyword: summarize_rows","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"This keyword takes a list of aggregation functions which are used to summarize the listed variable along the rows. A summary function should take a vector of values (usually that will be numbers) and output one summary value. This value can be of any type that SummaryTables can show in a cell (refer to Types of cell values for a list).","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\nusing Statistics: mean, std\n\ndata = DataFrame(\n    value = 1:24,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], 4),\n    group2 = repeat([\"G\", \"H\", \"I\", \"J\"], inner = 6),\n)\n\nmean_sd(values) = Concat(mean(values), \" (\", std(values), \")\")\n\nlistingtable(data,\n    :value,\n    rows = :group1,\n    cols = :group2,\n    summarize_rows = [\n        mean,\n        std => \"SD\",\n        mean_sd => \"Mean (SD)\",\n    ]\n)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"By default, one summary will be calculated over all rows of a given column. You can also choose to compute one summary for each group of a row grouping column, which makes sense if there is more than one row grouping column.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"In this example, one summary is computed for each level of the group1 column.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\nusing Statistics: mean, std\n\ndata = DataFrame(\n    value = 1:24,\n    group1 = repeat([\"X\", \"Y\"], 12),\n    group2 = repeat([\"A\", \"B\", \"C\"], 8),\n    group3 = repeat([\"G\", \"H\", \"I\", \"J\"], inner = 6),\n)\n\nmean_sd(values) = Concat(mean(values), \" (\", std(values), \")\")\n\nlistingtable(data,\n    :value,\n    rows = [:group1, :group2],\n    cols = :group3,\n    summarize_rows = :group1 => [\n        mean,\n        std => \"SD\",\n        mean_sd => \"Mean (SD)\",\n    ]\n)","category":"page"},{"location":"predefined_tables/listingtable/#Keyword:-summarize_cols","page":"listingtable","title":"Keyword: summarize_cols","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"This keyword takes a list of aggregation functions which are used to summarize the listed variable along the columns. A summary function should take a vector of values (usually that will be numbers) and output one summary value. This value can be of any type that SummaryTables can show in a cell (refer to Types of cell values for a list).","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\nusing Statistics: mean, std\n\ndata = DataFrame(\n    value = 1:24,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], 4),\n    group2 = repeat([\"G\", \"H\", \"I\", \"J\"], inner = 6),\n)\n\nmean_sd(values) = Concat(mean(values), \" (\", std(values), \")\")\n\nlistingtable(data,\n    :value,\n    rows = :group1,\n    cols = :group2,\n    summarize_cols = [\n        mean,\n        std => \"SD\",\n        mean_sd => \"Mean (SD)\",\n    ]\n)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"By default, one summary will be calculated over all columns of a given row. You can also choose to compute one summary for each group of a column grouping column, which makes sense if there is more than one column grouping column.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"In this example, one summary is computed for each level of the group1 column.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\nusing Statistics: mean, std\n\ndata = DataFrame(\n    value = 1:24,\n    group1 = repeat([\"X\", \"Y\"], 12),\n    group2 = repeat([\"A\", \"B\", \"C\"], 8),\n    group3 = repeat([\"G\", \"H\", \"I\", \"J\"], inner = 6),\n)\n\nmean_sd(values) = Concat(mean(values), \" (\", std(values), \")\")\n\nlistingtable(data,\n    :value,\n    cols = [:group1, :group2],\n    rows = :group3,\n    summarize_cols = :group1 => [\n        mean,\n        std => \"SD\",\n        mean_sd => \"Mean (SD)\",\n    ]\n)","category":"page"},{"location":"predefined_tables/listingtable/#Keyword:-variable_header","page":"listingtable","title":"Keyword: variable_header","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"If you set variable_header = false, you can hide the header cell with the variable label, which makes the table layout a little more compact.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Here is a table with the header cell:","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:6,\n    group1 = repeat([\"A\", \"B\", \"C\"], 2),\n    group2 = repeat([\"D\", \"E\"], inner = 3)\n)\n\nlistingtable(data, :value, rows = :group1, cols = :group2, variable_header = true)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"And here is a table without it:","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:6,\n    group1 = repeat([\"A\", \"B\", \"C\"], 2),\n    group2 = repeat([\"D\", \"E\"], inner = 3)\n)\n\nlistingtable(data, :value, rows = :group1, cols = :group2, variable_header = false)","category":"page"},{"location":"predefined_tables/listingtable/#Keyword:-sort","page":"listingtable","title":"Keyword: sort","text":"","category":"section"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"By default, group entries are sorted. If you need to maintain the order of entries from your dataset, set sort = false.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Notice how in the following two examples, the group indices are \"dos\", \"tres\", \"uno\" when sorted, but \"uno\", \"dos\", \"tres\" when not sorted. If we want to preserve the natural order of these groups (\"uno\", \"dos\", \"tres\" meaning \"one\", \"two\", \"three\" in Spanish but having a different alphabetical order) we need to set sort = false.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(\n    value = 1:6,\n    group1 = repeat([\"uno\", \"dos\", \"tres\"], inner = 2),\n    group2 = repeat([\"cuatro\", \"cinco\"], 3),\n)\n\nlistingtable(data, :value, rows = :group1, cols = :group2)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"listingtable(data, :value, rows = :group1, cols = :group2, sort = false)","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"warning: Warning\nIf you have multiple groups, sort = false can lead to splitting of higher-level groups if they are not correctly ordered in the source data.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"Compare the following two tables. In the second one, the group \"A\" is split by \"B\" so the label appears twice.","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"using SummaryTables\nusing DataFrames\n\ndata = DataFrame(\n    value = 1:4,\n    group1 = [\"A\", \"B\", \"B\", \"A\"],\n    group2 = [\"C\", \"D\", \"C\", \"D\"],\n)\n\nlistingtable(data, :value, rows = [:group1, :group2])","category":"page"},{"location":"predefined_tables/listingtable/","page":"listingtable","title":"listingtable","text":"data = DataFrame(\n    value = 1:4,\n    group1 = [\"A\", \"B\", \"B\", \"A\"],\n    group2 = [\"C\", \"D\", \"C\", \"D\"],\n)\n\nlistingtable(data, :value, rows = [:group1, :group2], sort = false)","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SummaryTables]","category":"page"},{"location":"api/#SummaryTables.Annotated-Tuple{Any, Any}","page":"API","title":"SummaryTables.Annotated","text":"Annotated(value, annotation; label = AutoNumbering())\n\nCreate an Annotated object which will be given a footnote annotation in the Table where it is used. If the label keyword is AutoNumbering(), annotations will be given number labels from 1 to N in the order of their appearance. If it is nothing, no label will be shown. Any other label will be used directly as the footnote label.\n\nEach unique label must be paired with a unique annotation, but the same combination can exist multiple times in a single table.\n\n\n\n\n\n","category":"method"},{"location":"api/#SummaryTables.Cell","page":"API","title":"SummaryTables.Cell","text":"Cell(value, style::CellStyle)\nCell(value; [bold, italic, underline, halign, valign, border_bottom, indent_pt, merge, mergegroup])\n\nConstruct a Cell with value value and CellStyle style, which can also be created implicitly with keyword arguments. For explanations of the styling options, refer to CellStyle. A cell with value nothing is displayed as an empty cell (styles might still apply). The type of value can be anything.\n\nSome types with special behavior are:\n\nMultiline for content broken over multiple lines in a cell. This object may not be used nested in other values, only as the top-level value.\nConcat for stringing together multiple values without having to interpolate them into a String, which keeps their own special behaviors intact.\nSuperscript and Subscript\nAnnotated for a value with an optional superscript label and a footnote annotation.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.CellStyle","page":"API","title":"SummaryTables.CellStyle","text":"CellStyle(;\n    bold::Bool = false,\n    italic::Bool = false,\n    underline::Bool = false,\n    halign::Symbol = :center,\n    valign::Symbol = :top,\n    indent_pt::Float64 = 0.0,\n    border_bottom::Bool = false,\n    merge::Bool = false,\n    mergegroup::UInt8 = 0,\n)\n\nCreate a CellStyle object which determines the visual appearance of Cells.\n\nKeyword arguments:\n\nbold renders text bold if true.\nitalic renders text italic if true.\nunderline underlines text if true.\nhalign determines the horizontal alignment within the cell, either :left, :center or :right.\nvalign determines the vertical alignment within the cell, either :top, :center or :bottom.\nindent_pt adds left indentation in points to the cell text.\nborder_bottom adds a bottom border to the cell if true.\nmerge causes adjacent cells which are == equal to be rendered as a single merged cell.\nmergegroup is a number that can be used to differentiate between two otherwise equal adjacent groups of cells that should not be merged together.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.Concat","page":"API","title":"SummaryTables.Concat","text":"Concat(args...)\n\nCreate a Concat object which can be used to concatenate the representations of multiple values in a single table cell while keeping the conversion semantics of each arg in args intact.\n\nExample\n\nConcat(\n    \"Some text and an \",\n    Annotated(\"annotated\", \"Some annotation\"),\n    \" value\",\n)\n# will be rendered as \"Some text and an annotated¹ value\"\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.Group","page":"API","title":"SummaryTables.Group","text":"Specifies one variable to group over and an associated name for display.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.GroupKey","page":"API","title":"SummaryTables.GroupKey","text":"GroupKey\n\nHolds the group column names and values for one group of a dataset. This struct has only one field:\n\nentries::Vector{Pair{Symbol,Any}}: A vector of column_name => group_value pairs.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.ListingPageMetadata","page":"API","title":"SummaryTables.ListingPageMetadata","text":"ListingPageMetadata\n\nDescribes which row and column group sections of a full listing table are included in a given page. There are two fields:\n\nrows::Vector{GroupKey}\ncols::Vector{GroupKey}\n\nEach Vector{GroupKey} holds all group keys that were relevant for pagination along that side of the listing table. A vector is empty if the table was not paginated along that side.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.Multiline","page":"API","title":"SummaryTables.Multiline","text":"Multiline(args...)\n\nCreate a Multiline object which renders each arg on a separate line. A Multiline value may only be used as the top-level value of a cell, so Cell(Multiline(...)) is allowed but Cell(Concat(Multiline(...), ...)) is not.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.Page","page":"API","title":"SummaryTables.Page","text":"Page{M}\n\nRepresents one page of a PaginatedTable.\n\nIt has two public fields:\n\ntable::Table: A part of the full table, created according to the chosen Pagination.\nmetadata::M: Information about which part of the full table this page contains. This is different for each table function that takes a Pagination argument because each such function may use its own logic for how to split pages.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.PaginatedTable","page":"API","title":"SummaryTables.PaginatedTable","text":"PaginatedTable{M}\n\nThe return type for all table functions that take a Pagination argument to split the table into pages according to table-specific pagination rules.\n\nThis type only has one field:\n\npages::Vector{Page{M}}: Each Page holds a table and metadata of type M which depends on the table function that creates the PaginatedTable.\n\nTo get the table of page 2, for a PaginatedTable stored in variable p, access p.pages[2].table.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.Replace","page":"API","title":"SummaryTables.Replace","text":"Replace(f, with)\nReplace(f; with)\n\nThis postprocessor replaces all cell values for which f(value) === true with the value with. If with <: Function then the new value will be with(value), instead.\n\nExamples\n\nReplace(x -> x isa String, \"A string was here\")\nReplace(x -> x isa String, uppercase)\nReplace(x -> x isa Int && iseven(x), \"An even Int was here\")\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.Summary","page":"API","title":"SummaryTables.Summary","text":"Stores the index of the grouping variable under which the summaries defined in analyses should be run. An index of 0 means that one summary block is appended after all columns or rows, an index of 1 means on summary block after each group from the first grouping key of rows or columns, and so on.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.SummaryAnalysis","page":"API","title":"SummaryTables.SummaryAnalysis","text":"Specifies one function to summarize the raw values of one group with, and an associated name for display.\n\n\n\n\n\n","category":"type"},{"location":"api/#SummaryTables.Table-Tuple{Any}","page":"API","title":"SummaryTables.Table","text":"function Table(cells;\n    header = nothing,\n    footer = nothing,\n    round_digits = 3,\n    round_mode = :auto,\n    trailing_zeros = false,\n    footnotes = [],\n    postprocess = [],\n    rowgaps = Pair{Int,Float64}[],\n    colgaps = Pair{Int,Float64}[],\n)\n\nCreate a Table which can be rendered in multiple formats, such as HTML or LaTeX.\n\nArguments\n\ncells::AbstractMatrix{<:Cell}: The matrix of Cells that make up the table.\n\nKeyword arguments\n\nheader: The index of the last row of the header, nothing if no header is specified.\nfooter: The index of the first row of the footer, nothing if no footer is specified.\nfootnotes: A vector of objects printed as footnotes that are not derived from Annotated values and therefore don't get labels with counterparts inside the table.\nround_digits = 3: Float values will be rounded to this precision before printing.\nround_mode = :auto: How the float values are rounded, options are :auto, :digits or :sigdigits. If round_mode === nothing, no rounding will be applied and round_digits and trailing_zeros will have no effect.\ntrailing_zeros = false: Controls if float values keep trailing zeros, for example 4.0 vs 4.\npostprocess = []: A list of post-processors which will be applied left to right to the table before displaying the table.  A post-processor can either work element-wise or on the whole table object. See the postprocess_table and  postprocess_cell functions for defining custom postprocessors.\nrowgaps = Pair{Int,Float64}[]: A list of pairs index => gap_pt. For each pair, a visual gap   the size of gap_pt is added between the rows index and index+1.\ncolgaps = Pair{Int,Float64}[]: A list of pairs index => gap_pt. For each pair, a visual gap   the size of gap_pt is added between the columns index and index+1.\n\nRound mode\n\nConsider the numbers 0.006789, 23.4567, 456.789 or 12345.0.\n\nHere is how these numbers are formatted with the different available rounding modes:\n\n:auto rounds to n significant digits but doesn't zero out additional digits before the comma unlike :sigdigits. For example, round_digits = 3 would result in 0.00679, 23.5, 457.0 or 12345.0. Numbers at orders of magnitude >= 6 or <= -5 are displayed in exponential notation as in Julia.\n:digits rounds to n digits after the comma and shows possibly multiple trailing zeros. For example, round_digits = 3 would result in 0.007, 23.457 or 456.789 or 12345.000. Numbers are never shown with exponential notation.\n:sigdigits rounds to n significant digits and zeros out additional digits before the comma unlike :auto. For example, round_digits = 3 would result in 0.00679, 23.5, 457.0 or 12300.0. Numbers at orders of magnitude >= 6 or <= -5 are displayed in exponential notation as in Julia.\n\n\n\n\n\n","category":"method"},{"location":"api/#SummaryTables.ReplaceMissing-Tuple{}","page":"API","title":"SummaryTables.ReplaceMissing","text":"ReplaceMissing(; with = Annotated(\"-\", \"- No value\"; label = NoLabel()))\n\nThis postprocessor replaces all missing cell values with the value in with.\n\n\n\n\n\n","category":"method"},{"location":"api/#SummaryTables.auto_round-Tuple{Any}","page":"API","title":"SummaryTables.auto_round","text":"auto_round(number; target_digits)\n\nRounds a floating point number to a target number of digits that are not leading zeros. For example, with 3 target digits, desirable numbers would be 123.0, 12.3, 1.23, 0.123, 0.0123 etc. Numbers larger than the number of digits are only rounded to the next integer (compare with round(1234, sigdigits = 3) which rounds to 1230.0). Numbers are rounded to target_digits significant digits when the floored base 10 exponent is -5 and lower or 6 and higher, as these numbers print with e notation by default in Julia.\n\nauto_round(        1234567, target_digits = 4) = 1.235e6\nauto_round(       123456.7, target_digits = 4) = 123457.0\nauto_round(       12345.67, target_digits = 4) = 12346.0\nauto_round(       1234.567, target_digits = 4) = 1235.0\nauto_round(       123.4567, target_digits = 4) = 123.5\nauto_round(       12.34567, target_digits = 4) = 12.35\nauto_round(       1.234567, target_digits = 4) = 1.235\nauto_round(      0.1234567, target_digits = 4) = 0.1235\nauto_round(     0.01234567, target_digits = 4) = 0.01235\nauto_round(    0.001234567, target_digits = 4) = 0.001235\nauto_round(   0.0001234567, target_digits = 4) = 0.0001235\nauto_round(  0.00001234567, target_digits = 4) = 1.235e-5\nauto_round( 0.000001234567, target_digits = 4) = 1.235e-6\nauto_round(0.0000001234567, target_digits = 4) = 1.235e-7\n\n\n\n\n\n","category":"method"},{"location":"api/#SummaryTables.listingtable","page":"API","title":"SummaryTables.listingtable","text":"listingtable(table, variable, [pagination];\n    rows = [],\n    cols = [],\n    summarize_rows = [],\n    summarize_cols = [],\n    variable_header = true,\n    table_kwargs...\n)\n\nCreate a listing table Table from table which displays raw values from column variable.\n\nArguments\n\ntable: Data source which must be convertible to a DataFrames.DataFrame.\nvariable: Determines which variable's raw values are shown. Can either be a Symbol such as :ColumnA, or alternatively a Pair where the second element is the display name, such as :ColumnA => \"Column A\".\npagination::Pagination: If a pagination object is passed, the return type changes to PaginatedTable. The Pagination object may be created with keywords rows and/or cols. These must be set to Ints that determine how many group sections along each side are included in one page. These group sections are determined by the summary structure, because pagination never splits a listing table within rows or columns that are being summarized together. If summarize_rows or summarize_cols is empty or unset, each group along that side is its own section. If summarize_rows or summarize_cols has a group passed via the column => ... syntax, the group sections along that side are determined by column. If no such column is passed (i.e., the summary along that side applies to the all groups) there is only one section along that side, which means that this side cannot be paginated into more than one page.\n\nKeyword arguments\n\nrows = []: Grouping structure along the rows. Should be a Vector where each element is a grouping variable, specified as a Symbol such as :Column1, or a Pair, where the first element is the symbol and the second a display name, such as :Column1 => \"Column 1\". Specifying multiple grouping variables creates nested groups, with the last variable changing the fastest.\ncols = []: Grouping structure along the columns. Follows the same structure as rows.\nsummarize_rows = []: Specifies functions to summarize variable with along the rows. Should be a Vector, where each entry is one separate summary. Each summary can be given as a Function such as mean or maximum, in which case the display name is the function's name. Alternatively, a display name can be given using the pair syntax, such as mean => \"Average\". By default, one summary is computed over all groups. You can also pass Symbol => [...] where Symbol is a grouping column, to compute one summary for each level of that group.\nsummarize_cols = []: Specifies functions to summarize variable with along the columns. Follows the same structure as summarize_rows.\nvariable_header = true: Controls if the cell with the name of the summarized variable is shown. \nsort = true: Sort the input table before grouping. Pre-sort as desired and set to false when you want to maintain a specific group order or are using non-sortable objects as group keys.\n\nAll other keywords are forwarded to the Table constructor, refer to its docstring for details.\n\nExample\n\nusing Statistics\n\ntbl = [\n    :Apples => [1, 2, 3, 4, 5, 6, 7, 8],\n    :Batch => [1, 1, 1, 1, 2, 2, 2, 2],\n    :Checked => [true, false, true, false, true, false, true, false],\n    :Delivery => ['a', 'a', 'b', 'b', 'a', 'a', 'b', 'b'],\n]\n\nlistingtable(\n    tbl,\n    :Apples => \"Number of apples\",\n    rows = [:Batch, :Checked => \"Checked for spots\"],\n    cols = [:Delivery],\n    summarize_cols = [sum => \"overall\"],\n    summarize_rows = :Batch => [mean => \"average\", sum]\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#SummaryTables.postprocess_cell","page":"API","title":"SummaryTables.postprocess_cell","text":"postprocess_cell\n\nOverload postprocess_cell(c::Cell, postprocessor::YourPostProcessor) to enable using YourPostProcessor as a cell postprocessor by passing it to the postprocess keyword argument of Table.\n\nThe function must always return a Cell. It will be applied on every cell of the table that is being postprocessed, all other table attributes will be left unmodified.\n\nUse postprocess_table instead if you need to modify table attributes during postprocessing.\n\n\n\n\n\n","category":"function"},{"location":"api/#SummaryTables.postprocess_table","page":"API","title":"SummaryTables.postprocess_table","text":"postprocess_table\n\nOverload postprocess_table(t::Table, postprocessor::YourPostProcessor) to enable using YourPostProcessor as a table postprocessor by passing it to the postprocess keyword argument of Table.\n\nThe function must always return a Table.\n\nUse postprocess_cell instead if you do not need to modify table attributes during postprocessing but only individual cells.\n\n\n\n\n\n","category":"function"},{"location":"api/#SummaryTables.summarytable-Tuple{Any, Any}","page":"API","title":"SummaryTables.summarytable","text":"summarytable(table, variable;\n    rows = [],\n    cols = [],\n    summary = [],\n    variable_header = true,\n    celltable_kws...\n)\n\nCreate a summary table Table from table, which summarizes values from column variable.\n\nArguments\n\ntable: Data source which must be convertible to a DataFrames.DataFrame.\nvariable: Determines which variable from table is summarized. Can either be a Symbol such as :ColumnA, or alternatively a Pair where the second element is the display name, such as :ColumnA => \"Column A\".\n\nKeyword arguments\n\nrows = []: Grouping structure along the rows. Should be a Vector where each element is a grouping variable, specified as a Symbol such as :Column1, or a Pair, where the first element is the symbol and the second a display name, such as :Column1 => \"Column 1\". Specifying multiple grouping variables creates nested groups, with the last variable changing the fastest.\ncols = []: Grouping structure along the columns. Follows the same structure as rows.\nsummary = []: Specifies functions to summarize variable with. Should be a Vector, where each entry is one separate summary. Each summary can be given as a Function such as mean or maximum, in which case the display name is the function's name. Alternatively, a display name can be given using the pair syntax, such as mean => \"Average\". By default, one summary is computed over all groups. You can also pass Symbol => [...] where Symbol is a grouping column, to compute one summary for each level of that group.\nvariable_header = true: Controls if the cell with the name of the summarized variable is shown.\nsort = true: Sort the input table before grouping. Pre-sort as desired and set to false when you want to maintain a specific group order or are using non-sortable objects as group keys.\n\nAll other keywords are forwarded to the Table constructor, refer to its docstring for details.\n\nExample\n\nusing Statistics\n\ntbl = [\n    :Apples => [1, 2, 3, 4, 5, 6, 7, 8],\n    :Batch => [1, 1, 1, 1, 2, 2, 2, 2],\n    :Delivery => ['a', 'a', 'b', 'b', 'a', 'a', 'b', 'b'],\n]\n\nsummarytable(\n    tbl,\n    :Apples => \"Number of apples\",\n    rows = [:Batch],\n    cols = [:Delivery],\n    summary = [length => \"N\", mean => \"average\", sum]\n)\n\n\n\n\n\n","category":"method"},{"location":"api/#SummaryTables.table_one-Tuple{Any, Any}","page":"API","title":"SummaryTables.table_one","text":"table_one(table, analyses; keywords...)\n\nConstruct a \"Table 1\" which summarises the patient baseline characteristics from the provided table dataset. This table is commonly used in biomedical research papers.\n\nIt can handle both continuous and categorical columns in table and summary statistics and hypothesis testing are able to be customised by the user. Tables can be stratified by one, or more, variables using the groupby keyword.\n\nKeywords\n\ngroupby: Which columns to stratify the dataset with, as a Vector{Symbol}.\nnonnormal: A vector of column names where hypothesis tests for the :nonnormal type are chosen.\nminmax: A vector of column names where hypothesis tests for the :minmax type are chosen.\ntests: a NamedTuple of hypothesis test types to use for categorical, nonnormal, minmax, and normal variables.\ncombine: an object from MultipleTesting to use when combining p-values.\nshow_overall: display the \"Overall\" column summary. Default is true.\nshow_n: Display the number of rows for each group key next to its label.\nshow_pvalues: display the P-Value column. Default is false.\nshow_testnames: display the Test column. Default is false.\nshow_confints: display the CI column. Default is false.\nsort: Sort the input table before grouping. Default is true. Pre-sort as desired and set to false when you want to maintain a specific group order or are using non-sortable objects as group keys.\n\nAll other keywords are forwarded to the Table constructor, refer to its docstring for details.\n\n\n\n\n\n","category":"method"},{"location":"api/#SummaryTables.to_docx-Tuple{Table}","page":"API","title":"SummaryTables.to_docx","text":"to_docx(ct::Table)\n\nCreates a WriteDocx.Table node for Table ct which can be inserted into a WriteDocx document.\n\n\n\n\n\n","category":"method"},{"location":"predefined_tables/summarytable/#summarytable","page":"summarytable","title":"summarytable","text":"","category":"section"},{"location":"predefined_tables/summarytable/#Synopsis","page":"summarytable","title":"Synopsis","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"A summary table summarizes the raw data from one column of a source table for different groups defined by grouping columns. It is similar to a listingtable without the raw values.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"Here is an example of a hypothetical clinical trial with drug concentration measurements of two participants with five time points each.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    concentration = [1.2, 4.5, 2.0, 1.5, 0.1, 1.8, 3.2, 1.8, 1.2, 0.2],\n    id = repeat([1, 2], inner = 5),\n    time = repeat([0, 0.5, 1, 2, 3], 2)\n)\n\nsummarytable(\n    data,\n    :concentration => \"Concentration (ng/mL)\",\n    cols = :time => \"Time (hr)\",\n    summary = [\n        length => \"N\",\n        mean => \"Mean\",\n        std => \"SD\",\n    ]\n)","category":"page"},{"location":"predefined_tables/summarytable/#Argument-1:-table","page":"summarytable","title":"Argument 1: table","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"The first argument can be any object that is a table compatible with the Tables.jl API. Here are some common examples:","category":"page"},{"location":"predefined_tables/summarytable/#DataFrame","page":"summarytable","title":"DataFrame","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:6,\n    group = repeat([\"A\", \"B\", \"C\"], 2),\n)\n\nsummarytable(data, :value, cols = :group, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/#NamedTuple-of-Vectors","page":"summarytable","title":"NamedTuple of Vectors","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using SummaryTables\nusing Statistics\n\ndata = (; value = 1:6, group = repeat([\"A\", \"B\", \"C\"], 2))\n\nsummarytable(data, :value, cols = :group, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/#Vector-of-NamedTuples","page":"summarytable","title":"Vector of NamedTuples","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using SummaryTables\nusing Statistics\n\ndata = [\n    (value = 1, group = \"A\")\n    (value = 2, group = \"B\")\n    (value = 3, group = \"C\")\n    (value = 4, group = \"A\")\n    (value = 5, group = \"B\")\n    (value = 6, group = \"C\")\n]\n\nsummarytable(data, :value, cols = :group, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/#Argument-2:-variable","page":"summarytable","title":"Argument 2: variable","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"The second argument primarily selects the table column whose data should populate the cells of the summary table. The column name is specified with a Symbol:","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value1 = 1:6,\n    value2 = 7:12,\n    group = repeat([\"A\", \"B\", \"C\"], 2),\n)\n\nsummarytable(data, :value1, cols = :group, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"Here we choose to list column :value2 instead:","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value1 = 1:6,\n    value2 = 7:12,\n    group = repeat([\"A\", \"B\", \"C\"], 2),\n)\n\nsummarytable(data, :value2, cols = :group, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"By default, the variable name is used as the label as well. You can pass a different label as the second element of a Pair using the => operators. The label can be of any type (refer to Types of cell values for a list).","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value1 = 1:6,\n    value2 = 7:12,\n    group = repeat([\"A\", \"B\", \"C\"], 2),\n)\n\nsummarytable(data, :value1 => \"Value\", cols = :group, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/#Keyword:-rows","page":"summarytable","title":"Keyword: rows","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"The rows keyword determines the grouping structure along the rows. It can either be a Symbol specifying a grouping column, a Pair{Symbol,Any} where the second element overrides the group's label, or a Vector with multiple groups of the aforementioned format.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"This example uses a single group with default label.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:6,\n    group = repeat([\"A\", \"B\", \"C\"], 2),\n)\n\nsummarytable(data, :value, rows = :group, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"The label can be overridden using the Pair operator.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:6,\n    group = repeat([\"A\", \"B\", \"C\"], 2),\n)\n\nsummarytable(data, :value, rows = :group => \"Group\", summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"Multiple groups are possible as well, in that case you get a nested display where the last group changes the fastest.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:12,\n    group1 = repeat([\"A\", \"B\"], inner = 6),\n    group2 = repeat([\"C\", \"D\", \"E\"], 4),\n)\n\nsummarytable(data, :value, rows = [:group1, :group2 => \"Group 2\"], summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/#Keyword:-cols","page":"summarytable","title":"Keyword: cols","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"The cols keyword determines the grouping structure along the columns. It can either be a Symbol specifying a grouping column, a Pair{Symbol,Any} where the second element overrides the group's label, or a Vector with multiple groups of the aforementioned format.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"This example uses a single group with default label.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:6,\n    group = repeat([\"A\", \"B\", \"C\"], 2),\n)\n\nsummarytable(data, :value, cols = :group, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"The label can be overridden using the Pair operator.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:6,\n    group = repeat([\"A\", \"B\", \"C\"], 2),\n)\n\nsummarytable(data, :value, cols = :group => \"Group\", summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"Multiple groups are possible as well, in that case you get a nested display where the last group changes the fastest.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:12,\n    group1 = repeat([\"A\", \"B\"], inner = 6),\n    group2 = repeat([\"C\", \"D\", \"E\"], 4),\n)\n\nsummarytable(data, :value, cols = [:group1, :group2 => \"Group 2\"], summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/#Keyword:-summary","page":"summarytable","title":"Keyword: summary","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"This keyword takes a list of aggregation functions which are used to summarize the chosen variable. A summary function should take a vector of values (usually that will be numbers) and output one summary value. This value can be of any type that SummaryTables can show in a cell (refer to Types of cell values for a list).","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:24,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\"], 6),\n    group2 = repeat([\"E\", \"F\", \"G\"], inner = 8),\n)\n\nmean_sd(values) = Concat(mean(values), \" (\", std(values), \")\")\n\nsummarytable(\n    data,\n    :value,\n    rows = :group1,\n    cols = :group2,\n    summary = [\n        mean,\n        std => \"SD\",\n        mean_sd => \"Mean (SD)\",\n    ]\n)","category":"page"},{"location":"predefined_tables/summarytable/#Keyword:-variable_header","page":"summarytable","title":"Keyword: variable_header","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"If you set variable_header = false, you can hide the header cell with the variable label, which makes the table layout a little more compact.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"Here is a table with the header cell:","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:24,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\"], 6),\n    group2 = repeat([\"E\", \"F\", \"G\"], inner = 8),\n)\n\nsummarytable(\n    data,\n    :value,\n    rows = :group1,\n    cols = :group2,\n    summary = [mean, std],\n)","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"And here is a table without it:","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:24,\n    group1 = repeat([\"A\", \"B\", \"C\", \"D\"], 6),\n    group2 = repeat([\"E\", \"F\", \"G\"], inner = 8),\n)\n\nsummarytable(\n    data,\n    :value,\n    rows = :group1,\n    cols = :group2,\n    summary = [mean, std],\n    variable_header = false,\n)","category":"page"},{"location":"predefined_tables/summarytable/#Keyword:-sort","page":"summarytable","title":"Keyword: sort","text":"","category":"section"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"By default, group entries are sorted. If you need to maintain the order of entries from your dataset, set sort = false.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"Notice how in the following two examples, the group indices are \"dos\", \"tres\", \"uno\" when sorted, but \"uno\", \"dos\", \"tres\" when not sorted. If we want to preserve the natural order of these groups (\"uno\", \"dos\", \"tres\" meaning \"one\", \"two\", \"three\" in Spanish but having a different alphabetical order) we need to set sort = false.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    value = 1:18,\n    group1 = repeat([\"uno\", \"dos\", \"tres\"], inner = 6),\n    group2 = repeat([\"cuatro\", \"cinco\"], 9),\n)\n\nsummarytable(data, :value, rows = :group1, cols = :group2, summary = [mean, std])","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"summarytable(data, :value, rows = :group1, cols = :group2, summary = [mean, std], sort = false)","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"warning: Warning\nIf you have multiple groups, sort = false can lead to splitting of higher-level groups if they are not correctly ordered in the source data.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"Compare the following two tables. In the second one, the group \"A\" is split by \"B\" so the label appears twice.","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"using SummaryTables\nusing DataFrames\nusing Statistics\n\ndata = DataFrame(\n    value = 1:4,\n    group1 = [\"A\", \"B\", \"B\", \"A\"],\n    group2 = [\"C\", \"D\", \"C\", \"D\"],\n)\n\nsummarytable(data, :value, rows = [:group1, :group2], summary = [mean])","category":"page"},{"location":"predefined_tables/summarytable/","page":"summarytable","title":"summarytable","text":"data = DataFrame(\n    value = 1:4,\n    group1 = [\"A\", \"B\", \"B\", \"A\"],\n    group2 = [\"C\", \"D\", \"C\", \"D\"],\n)\n\nsummarytable(data, :value, rows = [:group1, :group2], summary = [mean], sort = false)","category":"page"},{"location":"predefined_tables/table_one/#table_one","page":"table_one","title":"table_one","text":"","category":"section"},{"location":"predefined_tables/table_one/#Synopsis","page":"table_one","title":"Synopsis","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"\"Table 1\" is a common term for the first table in a paper that summarizes demographic and other individual data of the population that is being studied. In general terms, it is a table where different columns from the source table are summarized separately, stacked along the rows. The types of analysis can be chosen manually, or will be selected given the column types. Optionally, there can be grouping applied along the columns as well.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"In this example, several variables of a hypothetical population are analyzed split by sex.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\nusing DataFrames\n\ndata = DataFrame(\n    sex = [\"m\", \"m\", \"m\", \"m\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\"],\n    age = [27, 45, 34, 85, 55, 44, 24, 29, 37, 76],\n    blood_type = [\"A\", \"0\", \"B\", \"B\", \"B\", \"A\", \"0\", \"A\", \"A\", \"B\"],\n    smoker = [true, false, false, false, true, true, true, false, false, false],\n)\n\ntable_one(\n    data,\n    [:age => \"Age (years)\", :blood_type => \"Blood type\", :smoker => \"Smoker\"],\n    groupby = :sex => \"Sex\",\n    show_n = true\n)","category":"page"},{"location":"predefined_tables/table_one/#Argument-1:-table","page":"table_one","title":"Argument 1: table","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"The first argument can be any object that is a table compatible with the Tables.jl API. Here are some common examples:","category":"page"},{"location":"predefined_tables/table_one/#DataFrame","page":"table_one","title":"DataFrame","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using DataFrames\nusing SummaryTables\n\ndata = DataFrame(x = [1, 2, 3], y = [\"4\", \"5\", \"6\"])\n\ntable_one(data, [:x, :y])","category":"page"},{"location":"predefined_tables/table_one/#NamedTuple-of-Vectors","page":"table_one","title":"NamedTuple of Vectors","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3], y = [\"4\", \"5\", \"6\"])\n\ntable_one(data, [:x, :y])","category":"page"},{"location":"predefined_tables/table_one/#Vector-of-NamedTuples","page":"table_one","title":"Vector of NamedTuples","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = [(; x = 1, y = \"4\"), (; x = 2, y = \"5\"), (; x = 3, y = \"6\")]\n\ntable_one(data, [:x, :y])","category":"page"},{"location":"predefined_tables/table_one/#Argument-2:-analyses","page":"table_one","title":"Argument 2: analyses","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"The second argument takes a vector specifying analyses, with one entry for each \"row section\" of the resulting table. If only one analysis is passed, the vector can be omitted. Each analysis can have up to three parts: the variable, the analysis function and the label.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"The variable is passed as a Symbol, corresponding to a column in the input data, and must always be specified. The other two parts are optional.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"If you specify only variables, the analysis functions are chosen automatically based on the columns, and the labels are equal to the variable names. Number variables show the mean, standard deviation, median, minimum and maximum. String variables or other non-numeric variables show counts and percentages of each element type. ","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3], y = [\"a\", \"b\", \"a\"])\n\ntable_one(data, [:x, :y])","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"In the next example, we rename the x variable by passing a String in a Pair.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3], y = [\"a\", \"b\", \"a\"])\n\ntable_one(data, [:x => \"Variable X\", :y])","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"Labels can be any type except <:Function (that type signals that an analysis function has been passed). One example of a non-string label is Concat in conjunction with Superscript.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3], y = [\"a\", \"b\", \"a\"])\n\ntable_one(data, [:x => Concat(\"X\", Superscript(\"with superscript\")), :y])","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"Any object which is a subtype of Function is assumed to be an analysis function. An analysis function takes a data column as input and returns a Tuple where each entry corresponds to one analysis row. Each of these rows consists of a Pair where the left side is the analysis result and the right side the label. Here's an example of a custom number column analysis function. Note the use of Concat to build content out of multiple parts. This is preferred to interpolating into a string because interpolation destroys the original objects and takes away the possibility for automatic rounding or other special post-processing or display behavior.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\nusing Statistics\n\ndata = (; x = [1, 2, 3])\n\nfunction custom_analysis(column)\n    (\n        minimum(column) => \"Minimum\",\n        maximum(column) => \"Maximum\",\n        Concat(mean(column), \" (\", std(column), \")\") => \"Mean (SD)\",\n    )\nend\n\ntable_one(data, :x => custom_analysis)","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"Finally, all three parts, variable, analysis function and label can be combined as well:","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\nusing Statistics\n\ndata = (; x = [1, 2, 3])\n\nfunction custom_analysis(column)\n    (\n        minimum(column) => \"Minimum\",\n        maximum(column) => \"Maximum\",\n        Concat(mean(column), \" (\", std(column), \")\") => \"Mean (SD)\",\n    )\nend\n\ntable_one(data, :x => custom_analysis => \"Variable X\")","category":"page"},{"location":"predefined_tables/table_one/#Keyword:-groupby","page":"table_one","title":"Keyword: groupby","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"The groupby keyword takes a vector of column name symbols with optional labels. If there is only one grouping column, the vector can be omitted. Each analysis is then computed separately for each group.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3, 4, 5, 6], y = [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"])\n\ntable_one(data, :x, groupby = :y)","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"In this example, we rename the grouping column:","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3, 4, 5, 6], y = [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"])\n\ntable_one(data, :x, groupby = :y => \"Column Y\")","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"If there are multiple grouping columns, they are shown in a nested fashion, with the first group at the highest level:","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (;\n    x = [1, 2, 3, 4, 5, 6],\n    y = [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"],\n    z = [\"d\", \"e\", \"d\", \"e\", \"d\", \"e\"],\n)\n\ntable_one(data, :x, groupby = [:y, :z => \"Column Z\"])","category":"page"},{"location":"predefined_tables/table_one/#Keyword:-show_n","page":"table_one","title":"Keyword: show_n","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"When show_n is set to true, the size of each group is shown under its name.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3, 4, 5, 6], y = [\"a\", \"a\", \"a\", \"a\", \"b\", \"b\"])\n\ntable_one(data, :x, groupby = :y, show_n = true)","category":"page"},{"location":"predefined_tables/table_one/#Keyword:-show_overall","page":"table_one","title":"Keyword: show_overall","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"When show_overall is set to false, the column summarizing all groups together is hidden. Use this only when groupby is set, otherwise the resulting table will be empty.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3, 4, 5, 6], y = [\"a\", \"a\", \"a\", \"a\", \"b\", \"b\"])\n\ntable_one(data, :x, groupby = :y, show_overall = false)","category":"page"},{"location":"predefined_tables/table_one/#Keyword:-sort","page":"table_one","title":"Keyword: sort","text":"","category":"section"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"By default, group entries are sorted. If you need to maintain the order of entries from your dataset, set sort = false.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"Notice how in the following two examples, the group indices are \"dos\", \"tres\", \"uno\" when sorted, but \"uno\", \"dos\", \"tres\" when not sorted. If we want to preserve the natural order of these groups (\"uno\", \"dos\", \"tres\" meaning \"one\", \"two\", \"three\" in Spanish but having a different alphabetical order) we need to set sort = false.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3, 4, 5, 6], y = [\"uno\", \"uno\", \"dos\", \"dos\", \"tres\", \"tres\"])\n\ntable_one(data, :x, groupby = :y)","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"table_one(data, :x, groupby = :y, sort = false)","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"warning: Warning\nIf you have multiple groups, sort = false can lead to splitting of higher-level groups if they are not correctly ordered in the source data.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"Compare the following two tables. In the second one, the group \"A\" is split by \"B\" so the label appears twice.","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"using SummaryTables\n\ndata = (; x = [1, 2, 3, 4, 5, 6], y = [\"A\", \"A\", \"B\", \"B\", \"B\", \"A\"], z = [\"C\", \"C\", \"C\", \"D\", \"D\", \"D\"])\n\ntable_one(data, :x, groupby = [:y, :z])","category":"page"},{"location":"predefined_tables/table_one/","page":"table_one","title":"table_one","text":"table_one(data, :x, groupby = [:y, :z], sort = false)","category":"page"},{"location":"custom_tables/cell/#Cell","page":"Cell","title":"Cell","text":"","category":"section"},{"location":"custom_tables/cell/#Argument-1:-value","page":"Cell","title":"Argument 1: value","text":"","category":"section"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"This is the content of the Cell. How it is rendered is decided by the output format and what show methods are defined for the type of value and the respective output MIME type. If no output-specific MIME type has a show method, the fallback is always the generic text output.","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"The following are some types which receive special handling by SummaryTables.","category":"page"},{"location":"custom_tables/cell/#Special-Cell-value-types","page":"Cell","title":"Special Cell value types","text":"","category":"section"},{"location":"custom_tables/cell/#Floating-point-numbers","page":"Cell","title":"Floating point numbers","text":"","category":"section"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"Most tables display floating point numbers, however, the formatting of these numbers can vary. SummaryTables postprocesses every table in order to find unformatted floating point numbers. These are then given the default, table-wide, formatting.","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"using SummaryTables\n\ncells = [\n    Cell(1.23456) Cell(12.3456)\n    Cell(0.123456) Cell(0.0123456)\n]\nTable(cells)","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"using SummaryTables\n\ncells = [\n    Cell(1.23456) Cell(12.3456)\n    Cell(0.123456) Cell(0.0123456)\n]\nTable(cells; round_mode = :digits, round_digits = 5, trailing_zeros = true)","category":"page"},{"location":"custom_tables/cell/#Concat","page":"Cell","title":"Concat","text":"","category":"section"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"All the arguments of Concat are concatenated together in the final output. Note that this is usually preferrable to string-interpolating multiple values because you lose special handling of the value types (like floating point rounding behavior or special LaTeX formatting) if you turn them into strings.","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"using SummaryTables\nusing Statistics\n\nsome_numbers = [1, 2, 4, 7, 8, 13, 27]\nmu = mean(some_numbers)\nsd = std(some_numbers)\n\ncells = [\n    Cell(\"Mean (SD) interpolated\")  Cell(\"$mu ($sd)\")\n    Cell(\"Mean (SD) Concat\")        Cell(Concat(mu, \" (\", sd, \")\"))\n]\n\nTable(cells)","category":"page"},{"location":"custom_tables/cell/#Multiline","page":"Cell","title":"Multiline","text":"","category":"section"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"Use the Multiline type to force linebreaks between different values in a cell. A Multiline value may not be nested inside other values in a cell, it may only be the outermost value. All nested values retain their special behaviors, so using Multiline is preferred over hardcoding linebreaks in the specific output formats yourself.","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"using SummaryTables\n\ncells = [\n    Cell(Multiline(\"A1 a\", \"A1 b\"))  Cell(\"B1\")\n    Cell(\"A2\")                       Cell(\"B2\")\n]\n\nTable(cells)","category":"page"},{"location":"custom_tables/cell/#Annotated","page":"Cell","title":"Annotated","text":"","category":"section"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"To annotate elements in a table with footnotes, use the Annotated type. It takes an arbitrary value to annotate as well as an annotation which becomes a footnote in the table. You can also pass the label keyword if you don't want an auto-incrementing number as the label. You can also pass label = nothing if you want a footnote without label.","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"using SummaryTables\n\ncells = [\n    Cell(Annotated(\"A1\", \"This is the first cell\"))             Cell(\"B1\")\n    Cell(Annotated(\"A2\", \"A custom label\", label = \"x\"))        Cell(\"B2\")\n    Cell(Annotated(\"-\", \"- A missing value\", label = nothing))  Cell(\"B3\")\n]\n\nTable(cells)","category":"page"},{"location":"custom_tables/cell/#Superscript","page":"Cell","title":"Superscript","text":"","category":"section"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"Displays the wrapped value in superscript style. Use this instead of hardcoding output format specific commands.","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"using SummaryTables\n\ncells = [\n    Cell(\"Without superscript\")  Cell(Concat(\"With \", Superscript(\"superscript\")));\n]\n\nTable(cells)","category":"page"},{"location":"custom_tables/cell/#Subscript","page":"Cell","title":"Subscript","text":"","category":"section"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"Displays the wrapped value in subscript style. Use this instead of hardcoding output format specific commands.","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"using SummaryTables\n\ncells = [\n    Cell(\"Without subscript\")  Cell(Concat(\"With \", Subscript(\"subscript\")));\n]\n\nTable(cells)","category":"page"},{"location":"custom_tables/cell/#Optional-argument-2:-cellstyle","page":"Cell","title":"Optional argument 2: cellstyle","text":"","category":"section"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"You may pass the style settings of a Cell as a positional argument of type CellStyle. It is usually more convenient, however, to use the keyword arguments to Cell instead.","category":"page"},{"location":"custom_tables/cell/","page":"Cell","title":"Cell","text":"using SummaryTables\n\n\nTable([\n    Cell(\"A1\", CellStyle(bold = true))    Cell(\"B1\", CellStyle(underline = true))\n    Cell(\"A2\", CellStyle(italic = true))  Cell(\"B2\", CellStyle(indent_pt = 10))\n])","category":"page"},{"location":"custom_tables/cellstyle/#CellStyle","page":"CellStyle","title":"CellStyle","text":"","category":"section"},{"location":"custom_tables/cellstyle/#Keyword:-bold","page":"CellStyle","title":"Keyword: bold","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"Makes the text in the cell bold.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\ncells = reshape([\n    Cell(\"Some text in bold\", bold = true),\n], :, 1)\n\nTable(cells)","category":"page"},{"location":"custom_tables/cellstyle/#Keyword:-italic","page":"CellStyle","title":"Keyword: italic","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"Makes the text in the cell italic.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\ncells = reshape([\n    Cell(\"Some text in italic\", italic = true),\n], :, 1)\n\nTable(cells)","category":"page"},{"location":"custom_tables/cellstyle/#Keyword:-underline","page":"CellStyle","title":"Keyword: underline","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"Underlines the text in the cell.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\ncells = reshape([\n    Cell(Multiline(\"Some\", \"text\", \"that is\", \"underlined\"), underline = true),\n], :, 1)\n\nTable(cells)","category":"page"},{"location":"custom_tables/cellstyle/#Keyword:-halign","page":"CellStyle","title":"Keyword: halign","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"Aligns the cell content horizontally either at the :left, the :center or the :right.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\ncells = reshape([\n    Cell(\"A wide cell\"),\n    Cell(\":left\", halign = :left),\n    Cell(\":center\", halign = :center),\n    Cell(\":right\", halign = :right),\n], :, 1)\n\nTable(cells)","category":"page"},{"location":"custom_tables/cellstyle/#Keyword:-valign","page":"CellStyle","title":"Keyword: valign","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"Aligns the cell content vertically either at the :top, the :center or the :bottom.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\ncells = reshape([\n    Cell(Multiline(\"A\", \"tall\", \"cell\")),\n    Cell(\":top\", valign = :top),\n    Cell(\":center\", valign = :center),\n    Cell(\":bottom\", valign = :bottom),\n], 1, :)\n\nTable(cells)","category":"page"},{"location":"custom_tables/cellstyle/#Keyword:-indent_pt","page":"CellStyle","title":"Keyword: indent_pt","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"Indents the content of the cell on the left by the given number of pt units. This can be used to give hierarchical structure to adjacent rows.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\nC(value; kwargs...) = Cell(value; halign = :left, kwargs...)\n\ncells = [\n    C(\"Group A\")  C(\"Group B\")\n    C(\"Subgroup A\", indent_pt = 6)  C(\"Subgroup B\", indent_pt = 6)\n    C(\"Subgroup A\", indent_pt = 6)  C(\"Subgroup B\", indent_pt = 6)\n]\n\nTable(cells)","category":"page"},{"location":"custom_tables/cellstyle/#Keyword:-border_bottom","page":"CellStyle","title":"Keyword: border_bottom","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"Adds a border at the bottom of the cell. This option is meant for horizontally merged cells functioning as subheaders.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\nheader_cell = Cell(\"header\", border_bottom = true, merge = true)\n\ncells = [\n    header_cell   header_cell\n    Cell(\"body\")  Cell(\"body\")\n]\nTable(cells)","category":"page"},{"location":"custom_tables/cellstyle/#Keyword:-merge","page":"CellStyle","title":"Keyword: merge","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"All adjacent cells that are == equal to each other and have merge = true will be rendered as one merged cell.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\nmerged_cell = Cell(\"merged\", valign = :center, merge = true)\n\ncells = [\n    Cell(\"A1\")  Cell(\"B1\")   Cell(\"C1\")   Cell(\"D1\")\n    Cell(\"A2\")  merged_cell  merged_cell  Cell(\"D2\")\n    Cell(\"A3\")  merged_cell  merged_cell  Cell(\"D3\")\n    Cell(\"A4\")  Cell(\"B4\")   Cell(\"C4\")   Cell(\"D4\")\n]\nTable(cells)","category":"page"},{"location":"custom_tables/cellstyle/#Keyword:-mergegroup","page":"CellStyle","title":"Keyword: mergegroup","text":"","category":"section"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"Because adjacent cells that are == equal to each other are merged when merge = true is set, you can optionally set the mergegroup keyword of adjacent cells to a different value to avoid merging them even if their values are otherwise equal.","category":"page"},{"location":"custom_tables/cellstyle/","page":"CellStyle","title":"CellStyle","text":"using SummaryTables\n\nmerged_cell_1 = Cell(\"merged\", valign = :center, merge = true, mergegroup = 1)\nmerged_cell_2 = Cell(\"merged\", valign = :center, merge = true, mergegroup = 2)\n\ncells = [\n    Cell(\"A1\")  Cell(\"B1\")     Cell(\"C1\")     Cell(\"D1\")\n    Cell(\"A2\")  merged_cell_1  merged_cell_2  Cell(\"D2\")\n    Cell(\"A3\")  merged_cell_1  merged_cell_2  Cell(\"D3\")\n    Cell(\"A4\")  Cell(\"B4\")     Cell(\"C4\")     Cell(\"D4\")\n]\nTable(cells)","category":"page"},{"location":"custom_tables/table/#Table","page":"Table","title":"Table","text":"","category":"section"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"You can build custom tables using the Table type.","category":"page"},{"location":"custom_tables/table/#Argument-1:-cells","page":"Table","title":"Argument 1: cells","text":"","category":"section"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"The table's content is given as an AbstractMatrix of Cells:","category":"page"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"using SummaryTables\n\ncells = [Cell(\"$col$row\") for row in 1:5, col in 'A':'E']\nTable(cells)","category":"page"},{"location":"custom_tables/table/#Keyword:-header","page":"Table","title":"Keyword: header","text":"","category":"section"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"You can pass an Int to mark the last row of the header section. A divider line is placed after this row.","category":"page"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"using SummaryTables\n\ncells = [Cell(\"$col$row\") for row in 1:5, col in 'A':'E']\nTable(cells; header = 1)","category":"page"},{"location":"custom_tables/table/#Keyword:-footer","page":"Table","title":"Keyword: footer","text":"","category":"section"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"You can pass an Int to mark the first row of the footer section. A divider line is placed before this row.","category":"page"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"using SummaryTables\n\ncells = [Cell(\"$col$row\") for row in 1:5, col in 'A':'E']\nTable(cells; footer = 5)","category":"page"},{"location":"custom_tables/table/#Keyword:-footnotes","page":"Table","title":"Keyword: footnotes","text":"","category":"section"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"The footnotes keyword allows to add custom footnotes to the table which do not correspond to specific Annotated values in the table.","category":"page"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"using SummaryTables\n\ncells = [Cell(\"$col$row\") for row in 1:5, col in 'A':'E']\nTable(cells; footnotes = [\"Custom footnote 1\", \"Custom footnote 2\"])","category":"page"},{"location":"custom_tables/table/#Keyword:-rowgaps","page":"Table","title":"Keyword: rowgaps","text":"","category":"section"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"It can be beneficial for the readability of larger tables to add gaps between certain rows. These gaps can be passed as a Vector of Pairs where the first element is the index of the row gap and the second element is the gap size in pt.","category":"page"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"using SummaryTables\n\ncells = [Cell(\"$col$row\") for row in 1:9, col in 'A':'E']\nTable(cells; rowgaps = [3 => 8.0, 6 => 8.0])","category":"page"},{"location":"custom_tables/table/#Keyword:-colgaps","page":"Table","title":"Keyword: colgaps","text":"","category":"section"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"It can be beneficial for the readability of larger tables to add gaps between certain columns. These gaps can be passed as a Vector of Pairs where the first element is the index of the column gap and the second element is the gap size in pt.","category":"page"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"using SummaryTables\n\ncells = [Cell(\"$col$row\") for row in 1:5, col in 'A':'I']\nTable(cells; colgaps = [3 => 8.0, 6 => 8.0])","category":"page"},{"location":"custom_tables/table/#Types-of-cell-values","page":"Table","title":"Types of cell values","text":"","category":"section"},{"location":"custom_tables/table/","page":"Table","title":"Table","text":"TODO: List the different options here","category":"page"},{"location":"#SummaryTables","page":"SummaryTables","title":"SummaryTables","text":"","category":"section"},{"location":"","page":"SummaryTables","title":"SummaryTables","text":"SummaryTables is focused on creating tables for publications in LaTeX, docx and HTML formats. It offers both convenient predefined table functions that are inspired by common table formats in the pharma space, as well as an API to create completely custom tables.","category":"page"},{"location":"","page":"SummaryTables","title":"SummaryTables","text":"It deliberately uses an opinionated, limited styling API so that styling can be as consistent as possible across the different backends.","category":"page"},{"location":"","page":"SummaryTables","title":"SummaryTables","text":"using SummaryTables\nusing DataFrames\n\ndata = DataFrame(\n    sex = [\"m\", \"m\", \"m\", \"m\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\"],\n    age = [27, 45, 34, 85, 55, 44, 24, 29, 37, 76],\n    blood_type = [\"A\", \"0\", \"B\", \"B\", \"B\", \"A\", \"0\", \"A\", \"A\", \"B\"],\n    smoker = [true, false, false, false, true, true, true, false, false, false],\n)\n\ntable_one(\n    data,\n    [:age => \"Age (years)\", :blood_type => \"Blood type\", :smoker => \"Smoker\"],\n    groupby = :sex => \"Sex\",\n    show_n = true\n)","category":"page"},{"location":"","page":"SummaryTables","title":"SummaryTables","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    concentration = [1.2, 4.5, 2.0, 1.5, 0.1, 1.8, 3.2, 1.8, 1.2, 0.2],\n    id = repeat([1, 2], inner = 5),\n    time = repeat([0, 0.5, 1, 2, 3], 2)\n)\n\nlistingtable(\n    data,\n    :concentration => \"Concentration (ng/mL)\",\n    rows = :id => \"ID\",\n    cols = :time => \"Time (hr)\",\n    summarize_rows = [\n        length => \"N\",\n        mean => \"Mean\",\n        std => \"SD\",\n    ]\n)","category":"page"},{"location":"","page":"SummaryTables","title":"SummaryTables","text":"using DataFrames\nusing SummaryTables\nusing Statistics\n\ndata = DataFrame(\n    concentration = [1.2, 4.5, 2.0, 1.5, 0.1, 1.8, 3.2, 1.8, 1.2, 0.2],\n    id = repeat([1, 2], inner = 5),\n    time = repeat([0, 0.5, 1, 2, 3], 2)\n)\n\nsummarytable(\n    data,\n    :concentration => \"Concentration (ng/mL)\",\n    cols = :time => \"Time (hr)\",\n    summary = [\n        length => \"N\",\n        mean => \"Mean\",\n        std => \"SD\",\n    ]\n)","category":"page"},{"location":"output/#Output","page":"Output","title":"Output","text":"","category":"section"},{"location":"output/#HTML","page":"Output","title":"HTML","text":"","category":"section"},{"location":"output/","page":"Output","title":"Output","text":"In IDEs that support the MIME\"text/html\" or MIME\"juliavscode/html\" types, just displaying a Table will render it in HTML for you. All examples in this documentation are rendered this way. Alternatively, you can print HTML to any IO object via show(io, MIME\"text/html\", table).","category":"page"},{"location":"output/#LaTeX","page":"Output","title":"LaTeX","text":"","category":"section"},{"location":"output/","page":"Output","title":"Output","text":"You can print LaTeX code to any IO via show(io, MIME\"text/latex\", table). Keep in mind that the threeparttable, multirow and booktabs packages need to separately be included in your preamble due to the way LaTeX documents are structured.","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"using SummaryTables\nusing DataFrames\nusing tectonic_jll\n\n\nmkpath(joinpath(@__DIR__, \"outputs\"))\n\ndata = DataFrame(\n    sex = [\"m\", \"m\", \"m\", \"m\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\"],\n    age = [27, 45, 34, 85, 55, 44, 24, 29, 37, 76],\n    blood_type = [\"A\", \"0\", \"B\", \"B\", \"B\", \"A\", \"0\", \"A\", \"A\", \"B\"],\n    smoker = [true, false, false, false, true, true, true, false, false, false],\n)\n\ntbl = table_one(\n    data,\n    [:age => \"Age (years)\", :blood_type => \"Blood type\", :smoker => \"Smoker\"],\n    groupby = :sex => \"Sex\",\n    show_n = true\n)\n\n# render latex in a temp directory\nmktempdir() do dir\n    texfile = joinpath(dir, \"main.tex\")\n\n    open(texfile, \"w\") do io\n        # add the necessary packages in the preamble\n        println(io, raw\"\"\"\n            \\documentclass{article}\n            \\usepackage{threeparttable}\n            \\usepackage{multirow}\n            \\usepackage{booktabs}\n            \\begin{document}\n        \"\"\")\n\n        # print the table as latex code\n        show(io, MIME\"text/latex\"(), tbl)\n\n        println(io, raw\"\\end{document}\")\n    end\n\n    # render the tex file to pdf\n    tectonic_jll.tectonic() do bin\n        run(`$bin $texfile`)\n    end\n\n    cp(joinpath(dir, \"main.pdf\"), joinpath(@__DIR__, \"outputs\", \"example.pdf\"))\nend\n\nnothing # hide","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"Download example.pdf:","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"<a href=\"./../outputs/example.pdf\"><img src=\"./../assets/icon_pdf.png\" width=\"60\">","category":"page"},{"location":"output/#docx","page":"Output","title":"docx","text":"","category":"section"},{"location":"output/","page":"Output","title":"Output","text":"To get docx output, you need to use the WriteDocx.jl package because this format is not plain-text like LaTeX or HTML. The table node you get out of the to_docx function can be placed into sections on the same level as paragraphs.","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"using SummaryTables\nusing DataFrames\nimport WriteDocx as W\n\n\nmkpath(joinpath(@__DIR__, \"outputs\"))\n\ndata = DataFrame(\n    sex = [\"m\", \"m\", \"m\", \"m\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\"],\n    age = [27, 45, 34, 85, 55, 44, 24, 29, 37, 76],\n    blood_type = [\"A\", \"0\", \"B\", \"B\", \"B\", \"A\", \"0\", \"A\", \"A\", \"B\"],\n    smoker = [true, false, false, false, true, true, true, false, false, false],\n)\n\ntbl = table_one(\n    data,\n    [:age => \"Age (years)\", :blood_type => \"Blood type\", :smoker => \"Smoker\"],\n    groupby = :sex => \"Sex\",\n    show_n = true\n)\n\ndoc = W.Document(\n            W.Body([\n                W.Section([\n                    SummaryTables.to_docx(tbl)\n                ])\n            ])\n        )\n\nW.save(joinpath(@__DIR__, \"outputs\", \"example.docx\"), doc)\n\nnothing # hide","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"Download example.docx:","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"<a href=\"./../outputs/example.docx\"><img src=\"./../assets/icon_docx.png\" width=\"60\">","category":"page"},{"location":"output/#Typst","page":"Output","title":"Typst","text":"","category":"section"},{"location":"output/","page":"Output","title":"Output","text":"You can print Typst table code to any IO via show(io, MIME\"text/typst\", table). The Typst backend is using the tablex package. Due to the way Typst's package manager works, you do not have to add any other information to your .typ file to make SummaryTables's typst code work.","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"using SummaryTables\nusing DataFrames\nusing Typst_jll\n\n\nmkpath(joinpath(@__DIR__, \"outputs\"))\n\ndata = DataFrame(\n    sex = [\"m\", \"m\", \"m\", \"m\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\"],\n    age = [27, 45, 34, 85, 55, 44, 24, 29, 37, 76],\n    blood_type = [\"A\", \"0\", \"B\", \"B\", \"B\", \"A\", \"0\", \"A\", \"A\", \"B\"],\n    smoker = [true, false, false, false, true, true, true, false, false, false],\n)\n\ntbl = table_one(\n    data,\n    [:age => \"Age (years)\", :blood_type => \"Blood type\", :smoker => \"Smoker\"],\n    groupby = :sex => \"Sex\",\n    show_n = true\n)\n\n# render latex in a temp directory\nmktempdir() do dir\n    typfile = joinpath(dir, \"example.typ\")\n\n    open(typfile, \"w\") do io\n        # print the table as latex code\n        show(io, MIME\"text/typst\"(), tbl)\n    end\n\n    # render the tex file to pdf\n    Typst_jll.typst() do bin\n        run(`$bin compile $typfile`)\n    end\n\n    cp(joinpath(dir, \"example.pdf\"), joinpath(@__DIR__, \"outputs\", \"example_typst.pdf\"))\nend\n\nnothing # hide","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"Download example_typst.pdf:","category":"page"},{"location":"output/","page":"Output","title":"Output","text":"<a href=\"./../outputs/example_typst.pdf\"><img src=\"./../assets/icon_pdf.png\" width=\"60\">","category":"page"}]
}
